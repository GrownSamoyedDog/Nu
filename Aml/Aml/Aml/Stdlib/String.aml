; Aml String library.
; Copyright (C) Bryan Edds, 2012-2013.

[usingFile "Core.aml"]
[usingFile "Char.aml"]
[usingFile "Int.aml"]
[usingFile "List.aml"]
[usingFile "Sequence.aml"]

[struct stringEnumerator [str index] where: [[string str] [int index]]
    doc: "A string enumerator."
    req: (isPositive index)]

[instance semigroup [str str2] where: [[string str] [string str2]]
    doc: "An instance of the semigroup protocol over strings."
    [def <++> s++]]

[instance monoid [str str2] where: [[string str] [string str2]]
    doc: "An instance of the monoid protocol over strings."
    [def <id> [str] ""]]

[instance sizable [str str2] where: [[string str] [string str2]]
    doc: "An instance of the sizable protocol over strings."
    [def length sLength]
    [def isEmpty [str] (isZero (length str))]]

[instance sequence [enr] where: [[stringEnumerator enr]]
    doc: "An instance of the sequence protocol over string enumerators."
    [def isDone [enr] (= enr.index (length enr.str))]
    [def peek [enr] enr.str.enr::index]
    [def next [enr] (stringEnumerator enr.str (inc enr.index))]]

[instance sequence [str] where: [[string str]]
    doc: "An instance of the sequence protocol over strings."
    [def isDone isEmpty]
    [def peek [str] str.0]
    [def next [str] (next (stringEnumerator str 1))]]

[def stringToList [str] where: [[string str]]
    doc: "Convert a string to a list of characters."
    (arrayToList (stringToArray str))]

[def listToString [lst] where: [[list lst]]
    doc: "Convert a list of characters to a string."
    (arrayToString (listToArray lst))]

[def substring [start end str] where: [[int start] [int end] [string str]]
    doc: "Get a sub-string."
    (let (lst (stringToList str))
         (subLst (subsequence start end lst))
         (listToString subLst))]

#| Affirmations |#

[def strStr "str"]
[def strChars (list \"s" \"t" \"r")]

[affirmation stringToListWorks
    (= (stringToList strStr) strChars)]

[affirmation listToStringWorks
    (= (listToString strChars) strStr)]

[affirmation substringWorks
    (= (substring 1 2 strStr) "t")]