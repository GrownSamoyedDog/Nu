; Aml Long library.
; Copyright (C) Bryan Edds, 2012-2013.

[usingFile "Core.aml"]

; Long constants.
; TODO: document each of these
[def gMin -9223372036854775808]
[def gMax 9223372036854775807]

[instance comparable [x y] where: [[long x] [long y]]
    doc: "An instance of the comparable protocol over longs."
    [def < g<]
    [def > g>]
    [def <= g<=]
    [def >= g>=]]
    
[instance numeric [x y] where: [[long x] [long y]]
    doc: "An instance of the numeric protocol over longs."
    [def isExact [x] false]
    [def + g+]
    [def - g-]
    [def * g*]
    [def / g/]
    [def pow gPow]
    [def rem gRem]
    [def inc gInc]
    [def dec gDec]
    [def zeroAs [x] 0g]
    [def identityAs [x] 1g]
    [def minAs [x] gMin]
    [def maxAs [x] gMax]]

#| Affirmations |#

[affirmation longComparisonWorks
    (comparisonWorks 0g 5g)]
             
[affirmation longZeroAsWorks
    (= (zeroAs -g-) 0g)]
             
[affirmation longOneAsWorks
    (= (oneAs -g-) 1g)]
             
[affirmation longTwoAsWorks
    (= (twoAs -g-) 2g)]
             
[affirmation longNegateWorks
    (= (negate 5g) -5g)]
             
[affirmation longSignWorks
    (and (= (sign 5g) :positive)
         (= (sign -5g) :negative))]
             
[affirmation longIsPositiveWorks
    (and (isPositive 5g)
         (not (isPositive -5g)))]
       
[affirmation longIsNegativeWorks
    (and (isNegative -5g)
         (not (isNegative 5g)))]
    
[affirmation longIsEvenWorks
    (and (isEven 0g)
         (not (isEven 5g)))]
    
[affirmation longIsOddWorks
    (and (isOdd 5g)
         (not (isOdd 0g)))]
         
[affirmation longIsZeroWorks
    (and (isZero 0g)
         (not (isZero 5g)))]
         
[affirmation longIsOneWorks
    (and (isOne 1g)
         (not (isOne 0g)))]
         
[affirmation longAbsWorks
    (and (= (abs 5g) 5g)
         (= (abs -5g) 5g))]
         
[affirmation longSqrWorks
    (= (sqr 5g) 25g)]