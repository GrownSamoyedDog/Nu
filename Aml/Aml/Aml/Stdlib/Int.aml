; Aml Int library.
; Copyright (C) Bryan Edds, 2012-2013.

[usingFile "Core.aml"]

; Int constants.
; TODO: document these.
[def iMin -2147483648]
[def iMax 2147483647]

[instance comparable [x y] where: [[int x] [int y]]
    doc: "An instance of the comparable protocol over ints."
    [def < i<]
    [def > i>]
    [def <= i<=]
    [def >= i>=]]
    
[instance numeric [x y] where: [[int x] [int y]]
    doc: "An instance of the numeric protocol over ints."
    [def isExact [x] false]
    [def + i+]
    [def - i-]
    [def * i*]
    [def / i/]
    [def pow iPow]
    [def rem iRem]
    [def inc iInc]
    [def dec iDec]
    [def zeroAs [x] 0]
    [def identityAs [x] 1]
    [def minAs [x] iMin]
    [def maxAs [x] iMax]]

#| Affirmations |#

[affirmation intComparisonWorks
    (comparisonWorks 0 5)]
             
[affirmation intZeroAsWorks
    (= (zeroAs -i-) 0)]
             
[affirmation intOneAsWorks
    (= (oneAs -i-) 1)]
             
[affirmation intTwoAsWorks
    (= (twoAs -i-) 2)]
             
[affirmation intNegateWorks
    (= (negate 5) -5)]
             
[affirmation intSignWorks
    (and (= (sign 5) :positive)
         (= (sign -5) :negative))]
             
[affirmation intIsPositiveWorks
    (and (isPositive 5)
         (not (isPositive -5)))]
         
[affirmation intIsNegativeWorks
    (and (isNegative -5)
         (not (isNegative 5)))]
    
[affirmation intIsEvenWorks
    (and (isEven 0)
         (not (isEven 5)))]
    
[affirmation intIsOddWorks
    (and (isOdd 5)
         (not (isOdd 0)))]
         
[affirmation intIsZeroWorks
    (and (isZero 0)
         (not (isZero 5)))]
         
[affirmation intIsOneWorks
    (and (isOne 1)
         (not (isOne 0)))]
         
[affirmation intAbsWorks
    (and (= (abs 5) 5)
         (= (abs -5) 5))]
         
[affirmation intSqrWorks
    (= (sqr 5) 25)]