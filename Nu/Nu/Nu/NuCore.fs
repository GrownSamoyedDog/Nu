// Nu Game Engine.
// Copyright (C) Bryan Edds, 2013-2014.

namespace Nu
open System
open System.Configuration
open System.Text
open Prime

[<AutoOpen>]
module NuCoreModule =

    /// Specifies the screen-clearing routine.
    type ScreenClear =
        | NoClear
        | ColorClear of byte * byte * byte

    /// Specifies whether the engine is running or exiting.
    type Liveness =
        | Exiting
        | Running

    /// Specifies the address of an element in a game.
    type [<CustomEquality; CustomComparison>] Address =
        { AddrList : string list
          AddrStr : string }

        static member private listToString (list : string list) =
            String.Join ("/", list)

        static member makeAddress list =
            { AddrList = list; AddrStr = Address.listToString list }

        static member (@@) (address, address2) =
            let list = address.AddrList @ address2.AddrList
            Address.makeAddress list

        static member private innerCompareTo this that =
            String.Compare (this.AddrStr, that.AddrStr)
        
        static member private innerEquals this that =
            this.AddrStr = that.AddrStr

        interface Address IComparable with
            member this.CompareTo that =
                Address.innerCompareTo this that

        interface IComparable with
            member this.CompareTo that =
                match that with
                | :? Address as that -> Address.innerCompareTo this that
                | _ -> failwith "Invalid Address comparison (comparee not of type Address)."

        interface Address IEquatable with
            member this.Equals that =
                Address.innerEquals this that

        override this.Equals that =
            match that with
            | :? Address as that -> Address.innerEquals this that
            | _ -> false

        override this.GetHashCode () =
            this.AddrStr.GetHashCode ()

        override this.ToString () =
            Address.listToString this.AddrList

    let makeAddress =
        Address.makeAddress

    let addr (str : string) : Address =
        let list = List.ofArray <| str.Split '/'
        makeAddress list

    let straddr str (address : Address) : Address =
        addr str @@ address

    let addrstr (address : Address) str : Address =
        let list = address.AddrList @ [str]
        makeAddress list

    let straddrstr str (address : Address) str2 : Address =
        addr str @@ address @@ addr str2

    let listaddr list (address : Address) : Address =
        makeAddress <| list @ address.AddrList

    let addrlist (address : Address) list : Address =
        makeAddress <| address.AddrList @ list

    let listaddrlist list (address : Address) list2 : Address =
        makeAddress <| list @ address.AddrList @ list2

[<RequireQualifiedAccess>]
module NuCore =

    /// The invalid Id.
    /// TODO: ensure this will never be generated by Guid.NewGuid ().
    let InvalidId = Guid.Empty
    
    /// Make a Nu Id.
    let makeId = Guid.NewGuid

    let getResolutionOrDefault isX defaultResolution =
        let resolution = ref 0
        let appSetting = ConfigurationManager.AppSettings.["Resolution" + if isX then "X" else "Y"]
        if not <| Int32.TryParse (appSetting, resolution) then resolution := defaultResolution
        !resolution

[<RequireQualifiedAccess>]
module Address =

    let empty =
        makeAddress []

    let head address =
        List.head address.AddrList
        
    let tail address =
        makeAddress <| List.tail address.AddrList

    let at index address =
        List.at index address.AddrList

    let map mapper address =
        let addrList = List.map mapper address.AddrList
        makeAddress addrList

    let filter predicate address =
        let addrList = List.filter predicate address.AddrList
        makeAddress addrList

    let fold folder state address =
        List.fold folder state address.AddrList

    let skip n address =
        makeAddress <| List.skip n address.AddrList

    let take n address =
        makeAddress <| List.take n address.AddrList

    let last address =
        List.last address.AddrList

    let allButLast address =
        makeAddress <| List.allButLast address.AddrList

    let length address =
        List.length address.AddrList

    let isEmpty address =
        List.isEmpty address.AddrList